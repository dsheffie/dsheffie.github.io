From 7f006933ddc711652890b1b5adb55d26bc034ba7 Mon Sep 17 00:00:00 2001
From: David Sheffield <sheffield.david@gmail.com>
Date: Wed, 28 Aug 2024 20:40:17 -0700
Subject: [PATCH 2/3] my crappy csr tty driver hacked together from other linux
 modules

---
 arch/riscv/Makefile        |   7 +-
 drivers/misc/csr_console.c | 176 +++++++++++++++++++++++++++++++++++--
 drivers/tty/tty_ioctl.c    |   9 --
 fs/namei.c                 |  45 +++++++---
 fs/open.c                  |  43 +++++----
 init/main.c                |  20 ++---
 6 files changed, 244 insertions(+), 56 deletions(-)

diff --git a/arch/riscv/Makefile b/arch/riscv/Makefile
index a98b9847b368..b9cebdc59f23 100644
--- a/arch/riscv/Makefile
+++ b/arch/riscv/Makefile
@@ -40,7 +40,7 @@ endif
 riscv-march-$(CONFIG_ARCH_RV32I)	:= rv32ima
 riscv-march-$(CONFIG_ARCH_RV64I)	:= rv64ima_zicsr_zifencei
 riscv-march-$(CONFIG_FPU)		:= $(riscv-march-y)fd
-riscv-march-$(CONFIG_RISCV_ISA_C)	:= rv64ima_zicsr_zifencei 
+riscv-march-$(CONFIG_RISCV_ISA_C)	:= rv64ima_zicsr_zifencei
 KBUILD_CFLAGS += -march=$(subst fd,,$(riscv-march-y))
 KBUILD_AFLAGS += -march=$(riscv-march-y)
 
@@ -86,9 +86,10 @@ vdso_install:
 ifeq ($(CONFIG_RISCV_M_MODE)$(CONFIG_SOC_KENDRYTE),yy)
 KBUILD_IMAGE := $(boot)/loader.bin
 else
-KBUILD_IMAGE := $(boot)/Image.gz
+KBUILD_IMAGE := $(boot)/Image
 endif
-BOOT_TARGETS := Image Image.gz loader loader.bin
+BOOT_TARGETS := Image loader loader.bin
+
 
 all:	$(notdir $(KBUILD_IMAGE))
 
diff --git a/drivers/misc/csr_console.c b/drivers/misc/csr_console.c
index 93766536e318..5bf3316b78eb 100644
--- a/drivers/misc/csr_console.c
+++ b/drivers/misc/csr_console.c
@@ -9,24 +9,45 @@
 #include <linux/kernel.h>
 #include <linux/module.h>
 #include <linux/console.h>
+#include <linux/tty.h>
 #include <linux/slab.h>
+#include <linux/spinlock.h>
 
 static int csr_console_setup(struct console *c, char *opts);
 static void csr_console_write(struct console *c, const char *buf, unsigned len);
+static struct tty_driver *csr_console_device(struct console *c, int *index);
+
 
 static struct console csr_console = {
   .name = "csr_console",
   .write		= csr_console_write,
   .setup		= csr_console_setup,
-  .flags		= CON_PRINTBUFFER,
+  .device               = csr_console_device,
+  .flags		= CON_PRINTBUFFER | CON_CONSDEV ,
   .index		= -1,
 };
 
-static int csr_console_setup(struct console *c, char *opts) {
-	return 0;
-}
 
-static void csr_print(char *buf, int len) {
+struct ttyprintk_port {
+	struct tty_port port;
+	spinlock_t spinlock;
+};
+
+static struct ttyprintk_port tpk_port;
+
+/*
+ * Our simple preformatting supports transparent output of (time-stamped)
+ * printk messages (also suitable for logging service):
+ * - any cr is replaced by nl
+ * - adds a ttyprintk source tag in front of each line
+ * - too long message is fragmented, with '\'nl between fragments
+ * - TPK_STR_SIZE isn't really the write_room limiting factor, because
+ *   it is emptied on the fly during preformatting.
+ */
+#define TPK_STR_SIZE 508 /* should be bigger then max expected line length */
+#define TPK_MAX_ROOM 4096 /* we could assume 4K for instance */
+
+static void csr_print(const char *buf, int len) {
   int i;
   for(i = 0; i < len; i++) {
     while(csr_read(0xc03) != 0) {}
@@ -34,6 +55,151 @@ static void csr_print(char *buf, int len) {
   }
 }
 
+
+
+/*
+ * TTY operations open function.
+ */
+static int tpk_open(struct tty_struct *tty, struct file *filp)
+{
+	tty->driver_data = &tpk_port;
+	return tty_port_open(&tpk_port.port, tty, filp);
+}
+
+/*
+ * TTY operations close function.
+ */
+static void tpk_close(struct tty_struct *tty, struct file *filp)
+{
+	struct ttyprintk_port *tpkp = tty->driver_data;
+	unsigned long flags;
+	tty_port_close(&tpkp->port, tty, filp);
+}
+
+/*
+ * TTY operations write function.
+ */
+static int tpk_write(struct tty_struct *tty,
+		const unsigned char *buf, int count)
+{
+	struct ttyprintk_port *tpkp = tty->driver_data;
+	unsigned long flags;
+	int ret;
+
+
+	/* exclusive use of tpk_printk within this tty */
+	spin_lock_irqsave(&tpkp->spinlock, flags);
+	//ret = tpk_printk(buf, count);
+	csr_print(buf, count);
+	spin_unlock_irqrestore(&tpkp->spinlock, flags);
+
+	return count;
+}
+
+/*
+ * TTY operations write_room function.
+ */
+static int tpk_write_room(struct tty_struct *tty)
+{
+	return TPK_MAX_ROOM;
+}
+
+/*
+ * TTY operations ioctl function.
+ */
+static int tpk_ioctl(struct tty_struct *tty,
+			unsigned int cmd, unsigned long arg)
+{
+	struct ttyprintk_port *tpkp = tty->driver_data;
+
+	if (!tpkp)
+		return -EINVAL;
+
+	switch (cmd) {
+	/* Stop TIOCCONS */
+	case TIOCCONS:
+		return -EOPNOTSUPP;
+	default:
+		return -ENOIOCTLCMD;
+	}
+	return 0;
+}
+
+static const struct tty_operations ttyprintk_ops = {
+	.open = tpk_open,
+	.close = tpk_close,
+	.write = tpk_write,
+	.write_room = tpk_write_room,
+	.ioctl = tpk_ioctl,
+};
+
+static const struct tty_port_operations null_ops = { };
+
+static struct tty_driver *ttyprintk_driver;
+
+static int __init ttyprintk_init(void)
+{
+	int ret;
+
+	spin_lock_init(&tpk_port.spinlock);
+
+	ttyprintk_driver = tty_alloc_driver(1,
+			TTY_DRIVER_RESET_TERMIOS |
+			TTY_DRIVER_REAL_RAW |
+			TTY_DRIVER_UNNUMBERED_NODE);
+	if (IS_ERR(ttyprintk_driver))
+		return PTR_ERR(ttyprintk_driver);
+
+	tty_port_init(&tpk_port.port);
+	tpk_port.port.ops = &null_ops;
+
+	ttyprintk_driver->driver_name = "ttyprintk";
+	ttyprintk_driver->name = "ttyprintk";
+	ttyprintk_driver->major = TTYAUX_MAJOR;
+	ttyprintk_driver->minor_start = 3;
+	ttyprintk_driver->type = TTY_DRIVER_TYPE_CONSOLE;
+	ttyprintk_driver->init_termios = tty_std_termios;
+	ttyprintk_driver->init_termios.c_oflag = OPOST | OCRNL | ONOCR | ONLRET;
+	tty_set_operations(ttyprintk_driver, &ttyprintk_ops);
+	tty_port_link_device(&tpk_port.port, ttyprintk_driver, 0);
+
+	ret = tty_register_driver(ttyprintk_driver);
+	if (ret < 0) {
+		printk(KERN_ERR "Couldn't register ttyprintk driver\n");
+		goto error;
+	}
+
+	return 0;
+
+error:
+	put_tty_driver(ttyprintk_driver);
+	tty_port_destroy(&tpk_port.port);
+	return ret;
+}
+
+static void __exit ttyprintk_exit(void)
+{
+	tty_unregister_driver(ttyprintk_driver);
+	put_tty_driver(ttyprintk_driver);
+	tty_port_destroy(&tpk_port.port);
+}
+
+
+
+
+static struct tty_driver *csr_console_device(struct console *c, int *index) {
+  *index = c->index;
+  return ttyprintk_driver;
+}
+
+
+static int csr_console_setup(struct console *c, char *opts) {
+  ttyprintk_init();
+  
+  return 0;
+}
+
+
 static void csr_console_write(struct console *c, const char *buf, unsigned len) {
   csr_print(buf, len);
 }
diff --git a/drivers/tty/tty_ioctl.c b/drivers/tty/tty_ioctl.c
index 84146e221b7a..62377c654662 100644
--- a/drivers/tty/tty_ioctl.c
+++ b/drivers/tty/tty_ioctl.c
@@ -25,9 +25,6 @@
 #include <asm/io.h>
 #include <linux/uaccess.h>
 
-void csr_print(char *buf, int len, int add_nl);
-
-
 #undef TTY_DEBUG_WAIT_UNTIL_SENT
 
 #ifdef TTY_DEBUG_WAIT_UNTIL_SENT
@@ -899,10 +896,6 @@ int n_tty_ioctl_helper(struct tty_struct *tty, struct file *file,
 		       unsigned int cmd, unsigned long arg)
 {
 	int retval;
-	char buf[255];
-	sprintf(buf, "n_tty_ioctl_helper with cmd %u (TCXONC=%d, TCFLSH=%d), arg %lu\n", cmd, cmd==TCXONC, cmd==TCFLSH, arg);
-	csr_print(buf, strlen(buf), 0);
-	
 	switch (cmd)
 	  {
 	  case TCXONC:
@@ -946,8 +939,6 @@ int n_tty_ioctl_helper(struct tty_struct *tty, struct file *file,
 	    return __tty_perform_flush(tty, arg);
 	  default:
 	    /* Try the mode commands */
-	    sprintf(buf, "here %s:%d\n", __PRETTY_FUNCTION__, __LINE__);
-	    csr_print(buf,strlen(buf),0);
 	    return tty_mode_ioctl(tty, file, cmd, arg);
 	  }
 }
diff --git a/fs/namei.c b/fs/namei.c
index d4a6dd772303..ee9035e10fa5 100644
--- a/fs/namei.c
+++ b/fs/namei.c
@@ -3223,7 +3223,7 @@ static int do_open(struct nameidata *nd,
 	if (!(file->f_mode & FMODE_CREATED))
 		audit_inode(nd->name, nd->path.dentry, 0);
 	if (open_flag & O_CREAT) {
-		if ((open_flag & O_EXCL) && !(file->f_mode & FMODE_CREATED))
+		if ((open_flag & O_EXCL) && !(file->f_mode & FMODE_CREATED)) 
 			return -EEXIST;
 		if (d_is_dir(nd->path.dentry))
 			return -EISDIR;
@@ -3242,24 +3242,31 @@ static int do_open(struct nameidata *nd,
 		open_flag &= ~O_TRUNC;
 		acc_mode = 0;
 	} else if (d_is_reg(nd->path.dentry) && open_flag & O_TRUNC) {
-		error = mnt_want_write(nd->path.mnt);
+	  error = mnt_want_write(nd->path.mnt);
+
 		if (error)
 			return error;
 		do_truncate = true;
 	}
 	error = may_open(&nd->path, acc_mode, open_flag);
-	if (!error && !(file->f_mode & FMODE_OPENED))
+
+	
+	if (!error && !(file->f_mode & FMODE_OPENED)) 
 		error = vfs_open(&nd->path, file);
+	
 	if (!error)
 		error = ima_file_check(file, op->acc_mode);
+
 	if (!error && do_truncate)
 		error = handle_truncate(file);
+	
 	if (unlikely(error > 0)) {
 		WARN_ON(1);
 		error = -EINVAL;
 	}
 	if (do_truncate)
 		mnt_drop_write(nd->path.mnt);
+
 	return error;
 }
 
@@ -3351,10 +3358,11 @@ static struct file *path_openat(struct nameidata *nd,
 {
 	struct file *file;
 	int error;
-
+	
 	file = alloc_empty_file(op->open_flag, current_cred());
-	if (IS_ERR(file))
-		return file;
+	if (IS_ERR(file)) {
+	  return file;
+	}
 
 	if (unlikely(file->f_flags & __O_TMPFILE)) {
 		error = do_tmpfile(nd, flags, op, file);
@@ -3362,26 +3370,36 @@ static struct file *path_openat(struct nameidata *nd,
 		error = do_o_path(nd, flags, file);
 	} else {
 		const char *s = path_init(nd, flags);
+		//printk(KERN_INFO "->here %s:%d, s = %s\n", __PRETTY_FUNCTION__, __LINE__, s);
+		
 		while (!(error = link_path_walk(s, nd)) &&
 		       (s = open_last_lookups(nd, file, op)) != NULL)
 			;
+		
+		//printk(KERN_INFO "->here %s:%d, err no dev = %d\n", __PRETTY_FUNCTION__, __LINE__, error);
+		
 		if (!error)
 			error = do_open(nd, file, op);
+
+		//printk(KERN_INFO "->here %s:%d, err no dev = %d\n", __PRETTY_FUNCTION__, __LINE__, error);	
 		terminate_walk(nd);
 	}
 	if (likely(!error)) {
-		if (likely(file->f_mode & FMODE_OPENED))
-			return file;
-		WARN_ON(1);
-		error = -EINVAL;
+	  if (likely(file->f_mode & FMODE_OPENED)) {
+	    return file;
+	  }
+	  WARN_ON(1);
+	  error = -EINVAL;
 	}
 	fput(file);
+
 	if (error == -EOPENSTALE) {
 		if (flags & LOOKUP_RCU)
 			error = -ECHILD;
 		else
 			error = -ESTALE;
 	}
+	//printk(KERN_INFO "->here %s:%d, err no dev = %d\n", __PRETTY_FUNCTION__, __LINE__, error);	
 	return ERR_PTR(error);
 }
 
@@ -3394,10 +3412,13 @@ struct file *do_filp_open(int dfd, struct filename *pathname,
 
 	set_nameidata(&nd, dfd, pathname);
 	filp = path_openat(&nd, op, flags | LOOKUP_RCU);
-	if (unlikely(filp == ERR_PTR(-ECHILD)))
+	
+	if (unlikely(filp == ERR_PTR(-ECHILD))) {
 		filp = path_openat(&nd, op, flags);
-	if (unlikely(filp == ERR_PTR(-ESTALE)))
+	}
+	if (unlikely(filp == ERR_PTR(-ESTALE))) {
 		filp = path_openat(&nd, op, flags | LOOKUP_REVAL);
+	}
 	restore_nameidata();
 	return filp;
 }
diff --git a/fs/open.c b/fs/open.c
index 9af548fb841b..9fd63cabb371 100644
--- a/fs/open.c
+++ b/fs/open.c
@@ -766,13 +766,13 @@ static int do_dentry_open(struct file *f,
 {
 	static const struct file_operations empty_fops = {};
 	int error;
-
+	
 	path_get(&f->f_path);
 	f->f_inode = inode;
 	f->f_mapping = inode->i_mapping;
 	f->f_wb_err = filemap_sample_wb_err(f->f_mapping);
 	f->f_sb_err = file_sample_sb_err(f);
-
+	
 	if (unlikely(f->f_flags & O_PATH)) {
 		f->f_mode = FMODE_PATH | FMODE_OPENED;
 		f->f_op = &empty_fops;
@@ -800,23 +800,28 @@ static int do_dentry_open(struct file *f,
 		error = -ENODEV;
 		goto cleanup_all;
 	}
-
+	
 	error = security_file_open(f);
-	if (error)
-		goto cleanup_all;
-
+	if (error){
+	  goto cleanup_all;
+	}
+	
 	error = break_lease(locks_inode(f), f->f_flags);
-	if (error)
-		goto cleanup_all;
+	if (error) {
+	  goto cleanup_all;
+	}
 
+	//printk(KERN_INFO "->here %s:%d\n", __PRETTY_FUNCTION__, __LINE__);
+	
 	/* normally all 3 are set; ->open() can clear them if needed */
 	f->f_mode |= FMODE_LSEEK | FMODE_PREAD | FMODE_PWRITE;
 	if (!open)
-		open = f->f_op->open;
+	  open = f->f_op->open;
 	if (open) {
 		error = open(inode, f);
-		if (error)
-			goto cleanup_all;
+		if (error) {
+		  goto cleanup_all;
+		}
 	}
 	f->f_mode |= FMODE_OPENED;
 	if ((f->f_mode & (FMODE_READ | FMODE_WRITE)) == FMODE_READ)
@@ -1105,12 +1110,15 @@ inline int build_open_flags(const struct open_how *how, struct open_flags *op)
  */
 struct file *file_open_name(struct filename *name, int flags, umode_t mode)
 {
-	struct open_flags op;
-	struct open_how how = build_open_how(flags, mode);
-	int err = build_open_flags(&how, &op);
-	if (err)
-		return ERR_PTR(err);
-	return do_filp_open(AT_FDCWD, name, &op);
+  struct open_flags op;
+  struct open_how how = build_open_how(flags, mode);
+  int err = build_open_flags(&how, &op);
+  
+  if (err)
+    return ERR_PTR(err);
+  
+  
+  return do_filp_open(AT_FDCWD, name, &op);
 }
 
 /**
@@ -1133,6 +1141,7 @@ struct file *filp_open(const char *filename, int flags, umode_t mode)
 		file = file_open_name(name, flags, mode);
 		putname(name);
 	}
+	
 	return file;
 }
 EXPORT_SYMBOL(filp_open);
diff --git a/init/main.c b/init/main.c
index 32b2a8affafd..c496633db2e2 100644
--- a/init/main.c
+++ b/init/main.c
@@ -1477,16 +1477,16 @@ static int __ref kernel_init(void *unused)
 /* Open /dev/console, for stdin/stdout/stderr, this should never fail */
 void __init console_on_rootfs(void)
 {
-	struct file *file = filp_open("/dev/console", O_RDWR, 0);
-
-	if (IS_ERR(file)) {
-		pr_err("Warning: unable to open an initial console.\n");
-		return;
-	}
-	init_dup(file);
-	init_dup(file);
-	init_dup(file);
-	fput(file);
+  struct file *file = filp_open("/dev/console", O_RDWR, 0);
+  
+  if (IS_ERR(file)) {
+    pr_err("Warning: unable to open an initial console.\n");
+    return;
+  }
+  init_dup(file);
+  init_dup(file);
+  init_dup(file);
+  fput(file);
 }
 
 static noinline void __init kernel_init_freeable(void)
-- 
2.43.0

